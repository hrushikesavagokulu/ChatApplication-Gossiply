<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title><%= title %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap & FontAwesome -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.5.0/css/all.min.css">

  <style>
    body.dark {
      background-color: #121212;
      color: #eee;
    }

    body.dark .card,
    body.dark .form-control,
    body.dark .btn,
    body.dark .navbar {
      background-color: #1f1f1f;
      color: #eee;
    }

    .toggle-dark-btn {
      margin-left: auto;
    }

  :root {
    --bg-light: #f8f9fa;
    --text-light: #212529;
    --card-bg-light: #ffffff;
    --border-light: #dee2e6;

    --bg-dark: #121212;
    --text-dark: #f1f1f1;
    --card-bg-dark: #1f1f1f;
    --border-dark: #333;
  }

  body {
    background-color: var(--bg-light);
    color: var(--text-light);
    transition: background-color 0.3s ease, color 0.3s ease;
  }

  .dark {
    background-color: var(--bg-dark) !important;
    color: var(--text-dark) !important;
  }

  .dark .navbar {
    background-color: var(--card-bg-dark) !important;
    border-bottom: 1px solid var(--border-dark);
  }

  .dark .form-control,
  .dark .btn,
  .dark .card {
    background-color: var(--card-bg-dark);
    color: var(--text-dark);
    border: 1px solid var(--border-dark);
  }

  .dark .form-control::placeholder {
    color: #bbb;
  }

  .dark .btn-outline-secondary {
    color: #f1f1f1;
    border-color: #666;
  }

  .card {
    background-color: var(--card-bg-light);
    border: 1px solid var(--border-light);
    border-radius: 12px;
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
  }

  .card:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  }

  .card h5 {
    font-size: 1.2rem;
    font-weight: 700;
    color: inherit;
  }

  .card p {
    margin-bottom: 0.25rem;
    color: #6c757d;
    font-size: 0.95rem;
  }

  .dark .card p {
    color: #aaa;
  }

  .badge {
    padding: 0.5em 0.75em;
    font-size: 0.85rem;
    border-radius: 0.6rem;
    font-weight: 600;
  }

  .btn-sm {
    font-size: 0.85rem;
    padding: 0.35rem 0.75rem;
  }

  .btn-link {
    color: var(--text-light);
    font-weight: 600;
    font-size: 0.95rem;
  }

  .dark .btn-link {
    color: var(--text-dark);
  }

  #searchInput {
    border-radius: 10px;
    padding: 12px 16px;
  }

  #resultsList .card {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
  }

  @media (max-width: 576px) {
    #resultsList .card {
      flex-direction: column;
      align-items: flex-start;
    }

    .toggle-dark-btn {
      margin-left: 0;
    }
  }
  .navbar .navbar-brand.text-warning:hover {
  color: #ffc107; /* same yellow as Bootstrap warning */
}
.user-avatar {
  object-fit: cover;
  width: 48px;
  height: 48px;
  border-radius: 50%;
  border: 2px solid var(--border-light);
  transition: border-color 0.3s ease;
}

body.dark .user-avatar {
  border-color: var(--border-dark);
}


</style>

</head>
<body class="<%= (typeof theme !== 'undefined' && theme === 'dark') ? 'dark' : '' %>">

<!-- ✅ Navbar -->
<nav class="navbar navbar-expand-lg navbar-light bg-light sticky-top px-3">
<a class="navbar-brand fw-bold text-warning" href="/home">
  <i class="fa-solid fa-house"></i> Home
</a>
<div class="ms-3">
  <a class="nav-link d-inline me-3" href="/profile">
    <i class="fa-solid fa-user"></i> Profile
  </a>
  <a class="nav-link d-inline" href="/logout">
    <i class="fa-solid fa-right-from-bracket"></i> Logout
  </a>
</div>

  <button id="themeToggle" class="btn btn-outline-secondary ms-auto toggle-dark-btn">
    <i class="fa-regular fa-sun"></i> Light Mode
  </button>
</nav>

<!-- ✅ Main Content -->
<main class="container py-4">
  <h1 class="text-center mb-4">Search Users</h1>

  <!-- ✅ Search Bar -->
  <div class="mb-4">
    <input
      type="text"
      id="searchInput"
      class="form-control form-control-lg"
      placeholder="Search by name or email"
      autocomplete="off"
    />
  </div>

  <!-- ✅ Results -->
  <div id="resultsList" class="row g-3">
    <% users.forEach(user => { %>
      <div class="col-12 col-md-6">
        <div class="card shadow-sm p-3 d-flex justify-content-between align-items-center flex-md-row">
  <div class="d-flex align-items-center gap-3">
    <img src="<%= user.avatar %>" alt="<%= user.username %>'s avatar" class="user-avatar rounded-circle" width="48" height="48" />
    <div>
      <h5 class="mb-1"><%= user.username %></h5>
      <p class="mb-1 text-muted"><%= user.email %></p>
    </div>
  </div>
  <div class="text-end">
    <% if (user.isFriend) { %>
      <span class="badge bg-success">Added</span>
    <% } else if (user.requested) { %>
      <span class="badge bg-warning text-dark">Requested</span>
    <% } else { %>
      <form class="add-friend-form" data-user-id="<%= user._id %>" method="POST">
        <button type="submit" class="btn btn-primary btn-sm">Add Friend</button>
      </form>
    <% } %>
  </div>
</div>

      </div>
    <% }) %>
  </div>

  <div class="text-center mt-5">
    <a href="/home" class="btn btn-link text-decoration-none">&larr; Back to Home</a>
  </div>
</main>

<!-- ✅ Scripts -->
<script>
  const themeToggle = document.getElementById('themeToggle');

  if (localStorage.getItem('theme') === 'dark') {
    document.body.classList.add('dark');
    themeToggle.innerHTML = '<i class="fa-regular fa-moon"></i> Dark Mode';
  }

  themeToggle.addEventListener('click', () => {
    document.body.classList.toggle('dark');
    const isDark = document.body.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
    themeToggle.innerHTML = isDark
      ? '<i class="fa-regular fa-moon"></i> Dark Mode'
      : '<i class="fa-regular fa-sun"></i> Light Mode';
  });

  const searchInput = document.getElementById('searchInput');
  const resultsList = document.getElementById('resultsList');

  searchInput.addEventListener('input', async () => {
    const query = searchInput.value.trim();

    try {
      const response = await fetch(`/search?q=${encodeURIComponent(query)}`, {
        headers: { 'X-Requested-With': 'XMLHttpRequest' }
      });

      if (!response.ok) throw new Error('Failed to fetch');
      const html = await response.text();
      resultsList.innerHTML = html;

      // Rebind AJAX handlers for dynamically loaded buttons
      document.querySelectorAll('.add-friend-form').forEach(form => {
        form.addEventListener('submit', async e => {
          e.preventDefault();
          const userId = form.getAttribute('data-user-id');

          try {
            const res = await fetch(`/add-friend/${userId}`, {
              method: 'POST',
              headers: { 'X-Requested-With': 'XMLHttpRequest' }
            });

            if (!res.ok) throw new Error('Failed to send friend request');
            const badge = document.createElement('span');
            badge.className = 'badge bg-warning text-dark';
            badge.innerText = 'Requested';
            form.parentNode.replaceChild(badge, form);
          } catch (err) {
            console.error('Add friend error:', err);
          }
        });
      });
    } catch (err) {
      console.error('Search error:', err);
    }
  });
</script>

</body>
</html>
